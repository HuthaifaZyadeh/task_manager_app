// Mocks generated by Mockito 5.4.4 from annotations
// in simple_do/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:simple_do/app/auth/data/models/app_user_model.dart' as _i12;
import 'package:simple_do/app/auth/data/models/user_tokens_model.dart' as _i13;
import 'package:simple_do/app/auth/domain/entities/app_user.dart' as _i7;
import 'package:simple_do/app/auth/domain/entities/user_tokens.dart' as _i9;
import 'package:simple_do/app/auth/domain/repositories/base_auth_repository.dart'
    as _i4;
import 'package:simple_do/app/auth/domain/usecases/login_usecase.dart' as _i8;
import 'package:simple_do/app/auth/domain/usecases/refresh_token_usecase.dart'
    as _i10;
import 'package:simple_do/src/core/data_sources/remote/api_response.dart'
    as _i3;
import 'package:simple_do/src/core/data_sources/remote/services/auth_services.dart'
    as _i11;
import 'package:simple_do/src/error/failure.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeApiResponse_1<T> extends _i1.SmartFake
    implements _i3.ApiResponse<T> {
  _FakeApiResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BaseAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseAuthRepository extends _i1.Mock
    implements _i4.BaseAuthRepository {
  MockBaseAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.AppUser>> login(
          _i8.LoginParameters? parameters) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [parameters],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i7.AppUser>>.value(
            _FakeEither_0<_i6.Failure, _i7.AppUser>(
          this,
          Invocation.method(
            #login,
            [parameters],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i7.AppUser>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.AppUser>> me() => (super.noSuchMethod(
        Invocation.method(
          #me,
          [],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i7.AppUser>>.value(
            _FakeEither_0<_i6.Failure, _i7.AppUser>(
          this,
          Invocation.method(
            #me,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i7.AppUser>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i9.UserTokens>> refreshToken(
          _i10.RefreshTokenParameters? parameters) =>
      (super.noSuchMethod(
        Invocation.method(
          #refreshToken,
          [parameters],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i9.UserTokens>>.value(
            _FakeEither_0<_i6.Failure, _i9.UserTokens>(
          this,
          Invocation.method(
            #refreshToken,
            [parameters],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i9.UserTokens>>);
}

/// A class which mocks [AuthServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthServices extends _i1.Mock implements _i11.AuthServices {
  MockAuthServices() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.ApiResponse<_i12.AppUserModel>> login(
          Map<String, dynamic>? body) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [body],
        ),
        returnValue: _i5.Future<_i3.ApiResponse<_i12.AppUserModel>>.value(
            _FakeApiResponse_1<_i12.AppUserModel>(
          this,
          Invocation.method(
            #login,
            [body],
          ),
        )),
      ) as _i5.Future<_i3.ApiResponse<_i12.AppUserModel>>);

  @override
  _i5.Future<_i3.ApiResponse<_i12.AppUserModel>> me() => (super.noSuchMethod(
        Invocation.method(
          #me,
          [],
        ),
        returnValue: _i5.Future<_i3.ApiResponse<_i12.AppUserModel>>.value(
            _FakeApiResponse_1<_i12.AppUserModel>(
          this,
          Invocation.method(
            #me,
            [],
          ),
        )),
      ) as _i5.Future<_i3.ApiResponse<_i12.AppUserModel>>);

  @override
  _i5.Future<_i3.ApiResponse<_i13.UserTokensModel>> refresh(
          Map<String, dynamic>? body) =>
      (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [body],
        ),
        returnValue: _i5.Future<_i3.ApiResponse<_i13.UserTokensModel>>.value(
            _FakeApiResponse_1<_i13.UserTokensModel>(
          this,
          Invocation.method(
            #refresh,
            [body],
          ),
        )),
      ) as _i5.Future<_i3.ApiResponse<_i13.UserTokensModel>>);
}
